/*
 * Copyright Â© 2020 camunda services GmbH (info@camunda.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
plugins {
    id 'checkstyle'
    id 'java-library'
    id 'com.diffplug.gradle.spotless' version '3.30.0'
    id 'maven'
}

project.description = 'Zeebe Protocol Implementation using Immutables'
project.group = 'io.zeebe.protocol'
project.version = '1.0.0-SNAPSHOT'

sourceCompatibility = 11

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    zeebeStyle
}

ext {
    zeebeVersion = '0.23.1'
    immutablesVersion = '2.8.8'
    jacksonVersion = '2.11.0'
    slf4jVersion = '1.7.30'
    junitVersion = '5.6.2'
    assertjVersion = '3.16.1'
    jqwikVersion = '1.3.1'
}

dependencies {
    zeebeStyle "io.zeebe:zeebe-build-tools:${zeebeVersion}+@jar"

    implementation "io.zeebe:zeebe-protocol:${zeebeVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    annotationProcessor "org.immutables:value:${immutablesVersion}"
    compileOnly "org.immutables:value:${immutablesVersion}:annotations"

    // use directly the Zeebe Protocol Impl dependency to properly test the deserialization
    testImplementation "io.zeebe:zeebe-protocol-impl:${zeebeVersion}"
    testImplementation "io.zeebe:zeebe-protocol-asserts:${zeebeVersion}"

    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "net.jqwik:jqwik-api:${jqwikVersion}"
    testImplementation "net.jqwik:jqwik-engine:${jqwikVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

test {
    useJUnitPlatform {
        includeEngines 'jqwik', 'junit-jupiter'
    }

    include '**/*Test.class'
    include '**/*Tests.class'
}

checkstyle {
    config resources.text.fromArchiveEntry(configurations.zeebeStyle, "check/.checkstyle.xml")

    checkstyleMain {}
    checkstyleTest {}
}

spotless {
    java {
        target '**/*.java'
        licenseHeaderFile rootProject.file('HEADER')
        googleJavaFormat()
        trimTrailingWhitespace()
        removeUnusedImports()
    }

    spotlessApply {}
}
